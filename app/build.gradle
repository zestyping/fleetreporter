buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        // These docs use an open ended version so that our plugin
        // can be updated quickly in response to Android tooling updates

        // We recommend changing it to the latest version from our changelog:
        // https://docs.fabric.io/android/changelog.html#fabric-gradle-plugin
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

ext {
    getCommandOutput = { String... params ->
        def buffer = new ByteArrayOutputStream()
        exec {
            commandLine params
            standardOutput = buffer
        }
        buffer.toString().trim()
    }

    getGitCommitCount = { ->
        Integer.parseInt(getCommandOutput('git', 'rev-list', '--count', 'HEAD'))
    }

    // The "dirty" and "patch" indicators must both sort after ".", with the
    // "dirty" indicator coming first.  Alas, all the punctuation characters
    // after "." are special to the shell except ":", "=", "@", "^", "_", "~",
    // which are mysterious or hard to pronounce.  So let's use "d" and "p".
    getGitVersionDescription = { ->
        getCommandOutput('git', 'describe', '--tags', '--dirty=+')
                .replaceAll('^v', '')
                .replaceAll('-g([0-9a-f]+)(\\+?)', '$2 ($1$2)')
                .replaceAll('\\+$', 'd')
                .replace('+ ', 'd ')
                .replace('-', 'p')
    }
}

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'
    defaultConfig {
        applicationId "ca.zesty.fleetreporter"
        minSdkVersion 16
        targetSdkVersion 26
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        versionCode getGitCommitCount()
        versionName getGitVersionDescription()
    }
    packagingOptions {
        exclude 'META-INF/services/org.xmlpull.v1.XmlPullParserFactory'
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'android.arch.persistence.room:runtime:1.1.1'
    annotationProcessor 'android.arch.persistence.room:compiler:1.1.1'
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:cardview-v7:27.1.1'
    implementation 'com.android.support:support-annotations:27.1.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1', {
        exclude group: 'com.android.support', module: 'support-annotations'
    }
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.4@aar') {
        transitive = true;
    }
}

task copyDebugApk {
    def version = android.defaultConfig.versionName.replaceAll(' .*', '')
    def filename = 'fleetreporter-' + version + '.apk'
    doLast {
        println ''
        println 'Copying app-debug.apk to ' + filename
        copy {
            from 'build/outputs/apk/debug/app-debug.apk'
            into '../apks'
            rename 'app-debug.apk', filename
        }
    }
}

afterEvaluate {
    assembleDebug.finalizedBy copyDebugApk
}
